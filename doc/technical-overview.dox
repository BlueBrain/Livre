
/**
@page Technical_Overview Technical Overview
@section TABLE_OF_CONTENTS_Technical_overview Table of Contents
-# @ref Technical_Features
-# @ref Architecture
    -# @ref Render_Thread
    -# @ref Upload_Threads
    -# @ref Compute_Threads
    -# @ref Livre_Library
-# @ref References

@htmlonly
<hr>
@endhtmlonly

@section Technical_Features Technical Features

Livre is an out-of-core rendering engine that has the following features:

- Distributed rendering using Equalizer library (https://github.com/Eyescale/Equalizer)
(Sort-first is implemented, sort-last is in progress)
- Octree based out-of-core rendering.
- Visualisation of pre-processed UVF format.
  ([source code](https://github.com/SCIInstitute/Tuvok.git)) volume data sets.
- Real-time voxelisation of different data sources (surface meshes, BBP morphologies,
  local-field potentials, etc) through the use of plugins.
- Highly parallel architecture for rendering, data uploading and different computational tasks.

@image html livre_datasource.png "Livre rendering using an external data source"

- Multi-node, multi-gpu rendering (currently only sort-first rendering).

@image html LOD.png "Octree structure [2]"

- Error-based LOD selection and rendering quality.

@image html ViewLOD.png "View-based LOD selection [2]"

- Single-pass GPU Raycasting.

@section Architecture Architecture

@subsection Render_Thread Render thread

- Computing the LOD tree according to the viewpoint and sending the request to other threads for
the required nodes.
- Rendering the scene with the retrieved/available data.

@subsection Upload_Threads Upload threads

- Uploading the data to the to CPU memory and GPU memory
- Sending results to the rendering thread.

@subsection Compute_Threads Compute threads

- Computing the histogram of the visualised data.

@subsection Livre_Library Livre library

Livre is composed of 3 main libraries:
- core: Base classes for Cache, Pipeline, Visitors and Rendering.
- Lib: Implementations of Cache classes i.e "Data Cache", "Texture Cache",
implementation of the rendering pipeline.
- Eq: Equalizer class implementations, RayCastRenderer.

There are 2 different data sources included in the Livre repository:
- UVF: Supports pre-processed UVF volume data sets.
- memory (livre/Lib/Data/MemoryDataSource): Generates in-memory volume data.

@section References References

1. Fogal, Thomas, and Jens Kr√ºger. "Tuvok, an Architecture for Large Scale Volume Rendering." VMV.
2010.\n
2. Suter, Susanne K., et al. "Interactive multiscale tensor reconstruction for multiresolution
volume visualization." Visualization and Computer Graphics, IEEE Transactions on 17.12 (2011):
2135-2143.
*/
