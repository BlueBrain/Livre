# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})
find_package(PkgConfig)

set(ENV{PKG_CONFIG_PATH} "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
if(PKG_CONFIG_EXECUTABLE)
  find_package(Qt4 4.6 COMPONENTS QtCore QtGui)
  if((NOT Qt4_FOUND) AND (NOT QT4_FOUND))
    pkg_check_modules(Qt4 Qt4>=4.6)
  endif()
else()
  find_package(Qt4 4.6  COMPONENTS QtCore QtGui)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Boost 1.41.0 COMPONENTS date_time)
  if((NOT Boost_FOUND) AND (NOT BOOST_FOUND))
    pkg_check_modules(Boost Boost>=1.41.0)
  endif()
  if((NOT Boost_FOUND) AND (NOT BOOST_FOUND))
    message(FATAL_ERROR "Could not find Boost")
  endif()
else()
  find_package(Boost 1.41.0  REQUIRED date_time)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Collage 1.1.0)
  if((NOT Collage_FOUND) AND (NOT COLLAGE_FOUND))
    pkg_check_modules(Collage Collage>=1.1.0)
  endif()
  if((NOT Collage_FOUND) AND (NOT COLLAGE_FOUND))
    message(FATAL_ERROR "Could not find Collage")
  endif()
else()
  find_package(Collage 1.1.0  REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Equalizer 1.7.0)
  if((NOT Equalizer_FOUND) AND (NOT EQUALIZER_FOUND))
    pkg_check_modules(Equalizer Equalizer>=1.7.0)
  endif()
  if((NOT Equalizer_FOUND) AND (NOT EQUALIZER_FOUND))
    message(FATAL_ERROR "Could not find Equalizer")
  endif()
else()
  find_package(Equalizer 1.7.0  REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Lunchbox 1.9.0)
  if((NOT Lunchbox_FOUND) AND (NOT LUNCHBOX_FOUND))
    pkg_check_modules(Lunchbox Lunchbox>=1.9.0)
  endif()
  if((NOT Lunchbox_FOUND) AND (NOT LUNCHBOX_FOUND))
    message(FATAL_ERROR "Could not find Lunchbox")
  endif()
else()
  find_package(Lunchbox 1.9.0  REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(OpenGL )
  if((NOT OpenGL_FOUND) AND (NOT OPENGL_FOUND))
    pkg_check_modules(OpenGL OpenGL)
  endif()
  if((NOT OpenGL_FOUND) AND (NOT OPENGL_FOUND))
    message(FATAL_ERROR "Could not find OpenGL")
  endif()
else()
  find_package(OpenGL   REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(PNG )
  if((NOT PNG_FOUND) AND (NOT PNG_FOUND))
    pkg_check_modules(PNG PNG)
  endif()
  if((NOT PNG_FOUND) AND (NOT PNG_FOUND))
    message(FATAL_ERROR "Could not find PNG")
  endif()
else()
  find_package(PNG   REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Threads )
  if((NOT Threads_FOUND) AND (NOT THREADS_FOUND))
    pkg_check_modules(Threads Threads)
  endif()
  if((NOT Threads_FOUND) AND (NOT THREADS_FOUND))
    message(FATAL_ERROR "Could not find Threads")
  endif()
else()
  find_package(Threads   REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(vmmlib 1.7.0)
  if((NOT vmmlib_FOUND) AND (NOT VMMLIB_FOUND))
    pkg_check_modules(vmmlib vmmlib>=1.7.0)
  endif()
  if((NOT vmmlib_FOUND) AND (NOT VMMLIB_FOUND))
    message(FATAL_ERROR "Could not find vmmlib")
  endif()
else()
  find_package(vmmlib 1.7.0  REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(BLAS )
  if((NOT BLAS_FOUND) AND (NOT BLAS_FOUND))
    pkg_check_modules(BLAS BLAS)
  endif()
else()
  find_package(BLAS  )
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(LAPACK )
  if((NOT LAPACK_FOUND) AND (NOT LAPACK_FOUND))
    pkg_check_modules(LAPACK LAPACK)
  endif()
else()
  find_package(LAPACK  )
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Atlas )
  if((NOT Atlas_FOUND) AND (NOT ATLAS_FOUND))
    pkg_check_modules(Atlas Atlas)
  endif()
else()
  find_package(Atlas  )
endif()


if(EXISTS ${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
  include(${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
endif()

if(QT4_FOUND)
  set(Qt4_name QT4)
  set(Qt4_FOUND TRUE)
elseif(Qt4_FOUND)
  set(Qt4_name Qt4)
  set(QT4_FOUND TRUE)
endif()
if(Qt4_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_QT4)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt4")
  link_directories(${${Qt4_name}_LIBRARY_DIRS})
  if(NOT "${${Qt4_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Qt4_name}_INCLUDE_DIRS})
  endif()
endif()

if(BOOST_FOUND)
  set(Boost_name BOOST)
  set(Boost_FOUND TRUE)
elseif(Boost_FOUND)
  set(Boost_name Boost)
  set(BOOST_FOUND TRUE)
endif()
if(Boost_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_BOOST)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Boost")
  link_directories(${${Boost_name}_LIBRARY_DIRS})
  if(NOT "${${Boost_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIRS})
  endif()
endif()

if(COLLAGE_FOUND)
  set(Collage_name COLLAGE)
  set(Collage_FOUND TRUE)
elseif(Collage_FOUND)
  set(Collage_name Collage)
  set(COLLAGE_FOUND TRUE)
endif()
if(Collage_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_COLLAGE)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Collage")
  link_directories(${${Collage_name}_LIBRARY_DIRS})
  if(NOT "${${Collage_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Collage_name}_INCLUDE_DIRS})
  endif()
endif()

if(EQUALIZER_FOUND)
  set(Equalizer_name EQUALIZER)
  set(Equalizer_FOUND TRUE)
elseif(Equalizer_FOUND)
  set(Equalizer_name Equalizer)
  set(EQUALIZER_FOUND TRUE)
endif()
if(Equalizer_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_EQUALIZER)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Equalizer")
  link_directories(${${Equalizer_name}_LIBRARY_DIRS})
  if(NOT "${${Equalizer_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Equalizer_name}_INCLUDE_DIRS})
  endif()
endif()

if(LUNCHBOX_FOUND)
  set(Lunchbox_name LUNCHBOX)
  set(Lunchbox_FOUND TRUE)
elseif(Lunchbox_FOUND)
  set(Lunchbox_name Lunchbox)
  set(LUNCHBOX_FOUND TRUE)
endif()
if(Lunchbox_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_LUNCHBOX)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Lunchbox")
  link_directories(${${Lunchbox_name}_LIBRARY_DIRS})
  if(NOT "${${Lunchbox_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Lunchbox_name}_INCLUDE_DIRS})
  endif()
endif()

if(OPENGL_FOUND)
  set(OpenGL_name OPENGL)
  set(OpenGL_FOUND TRUE)
elseif(OpenGL_FOUND)
  set(OpenGL_name OpenGL)
  set(OPENGL_FOUND TRUE)
endif()
if(OpenGL_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_OPENGL)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenGL")
  link_directories(${${OpenGL_name}_LIBRARY_DIRS})
  if(NOT "${${OpenGL_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenGL_name}_INCLUDE_DIRS})
  endif()
endif()

if(PNG_FOUND)
  set(PNG_name PNG)
  set(PNG_FOUND TRUE)
elseif(PNG_FOUND)
  set(PNG_name PNG)
  set(PNG_FOUND TRUE)
endif()
if(PNG_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_PNG)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} PNG")
  link_directories(${${PNG_name}_LIBRARY_DIRS})
  if(NOT "${${PNG_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${PNG_name}_INCLUDE_DIRS})
  endif()
endif()

if(THREADS_FOUND)
  set(Threads_name THREADS)
  set(Threads_FOUND TRUE)
elseif(Threads_FOUND)
  set(Threads_name Threads)
  set(THREADS_FOUND TRUE)
endif()
if(Threads_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_THREADS)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Threads")
  link_directories(${${Threads_name}_LIBRARY_DIRS})
  if(NOT "${${Threads_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Threads_name}_INCLUDE_DIRS})
  endif()
endif()

if(VMMLIB_FOUND)
  set(vmmlib_name VMMLIB)
  set(vmmlib_FOUND TRUE)
elseif(vmmlib_FOUND)
  set(vmmlib_name vmmlib)
  set(VMMLIB_FOUND TRUE)
endif()
if(vmmlib_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_VMMLIB)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} vmmlib")
  link_directories(${${vmmlib_name}_LIBRARY_DIRS})
  if(NOT "${${vmmlib_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${vmmlib_name}_INCLUDE_DIRS})
  endif()
endif()

if(BLAS_FOUND)
  set(BLAS_name BLAS)
  set(BLAS_FOUND TRUE)
elseif(BLAS_FOUND)
  set(BLAS_name BLAS)
  set(BLAS_FOUND TRUE)
endif()
if(BLAS_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_BLAS)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} BLAS")
  link_directories(${${BLAS_name}_LIBRARY_DIRS})
  if(NOT "${${BLAS_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${BLAS_name}_INCLUDE_DIRS})
  endif()
endif()

if(LAPACK_FOUND)
  set(LAPACK_name LAPACK)
  set(LAPACK_FOUND TRUE)
elseif(LAPACK_FOUND)
  set(LAPACK_name LAPACK)
  set(LAPACK_FOUND TRUE)
endif()
if(LAPACK_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_LAPACK)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} LAPACK")
  link_directories(${${LAPACK_name}_LIBRARY_DIRS})
  if(NOT "${${LAPACK_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${LAPACK_name}_INCLUDE_DIRS})
  endif()
endif()

if(ATLAS_FOUND)
  set(Atlas_name ATLAS)
  set(Atlas_FOUND TRUE)
elseif(Atlas_FOUND)
  set(Atlas_name Atlas)
  set(ATLAS_FOUND TRUE)
endif()
if(Atlas_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_ATLAS)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Atlas")
  link_directories(${${Atlas_name}_LIBRARY_DIRS})
  if(NOT "${${Atlas_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Atlas_name}_INCLUDE_DIRS})
  endif()
endif()

set(LIVRE_BUILD_DEBS autoconf;automake;bison;cmake;doxygen;flex;freeglut3-dev;git;git-review;libavahi-compat-libdnssd-dev;libavcodec-dev;libavformat-dev;libavutil-dev;libboost-date-time-dev;libboost-filesystem-dev;libboost-program-options-dev;libboost-regex-dev;libboost-serialization-dev;libboost-system-dev;libboost-test-dev;libfcgi-dev;libgl1-mesa-dev;libglewmx1.6-dev;libhwloc-dev;libibverbs-dev;libjpeg-turbo8-dev;libopencv-dev;libopenmpi-dev;libopenscenegraph-dev;libpoppler-dev;libqt4-dev;librdmacm-dev;libspnav-dev;libswscale-dev;libtclap-dev;libturbojpeg;libudt-dev;libx11-dev;libxmu-dev;openmpi-bin;pkg-config;subversion)

set(LIVRE_DEPENDS Qt4;Boost;Collage;Equalizer;Lunchbox;OpenGL;PNG;Threads;vmmlib;BLAS;LAPACK;Atlas)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  message(WARNING "PROJECT_INCLUDE_NAME not set, old or missing Common.cmake?")
  set(PROJECT_INCLUDE_NAME ${CMAKE_PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
list(APPEND COMMON_INCLUDES ${DEFINES_FILE})
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
if(CMAKE_MODULE_INSTALL_PATH)
  install(FILES ${OPTIONS_CMAKE} DESTINATION ${CMAKE_MODULE_INSTALL_PATH}
    COMPONENT dev)
else()
  message(WARNING "CMAKE_MODULE_INSTALL_PATH not set, old or missing Common.cmake?")
endif()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
configure_file(${DEFINES_FILE_IN} ${DEFINES_FILE} COPYONLY)
if(Boost_FOUND) # another WAR for broken boost stuff...
  set(Boost_VERSION ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})
endif()
if(CUDA_FOUND)
  string(REPLACE "-std=c++11" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
  string(REPLACE "-std=c++0x" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
endif()
if(QT4_FOUND)
  if(WIN32)
    set(QT_USE_QTMAIN TRUE)
  endif()
  # Configure a copy of the 'UseQt4.cmake' system file.
  if(NOT EXISTS ${QT_USE_FILE})
    message(WARNING "Can't find QT_USE_FILE!")
  else()
    set(_customUseQt4File "${CMAKE_BINARY_DIR}/UseQt4.cmake")
    file(READ ${QT_USE_FILE} content)
    # Change all include_directories() to use the SYSTEM option
    string(REPLACE "include_directories(" "include_directories(SYSTEM " content ${content})
    file(WRITE ${_customUseQt4File} ${content})
    set(QT_USE_FILE ${_customUseQt4File})
    include(${QT_USE_FILE})
  endif()
endif()
if(FIND_PACKAGES_FOUND)
  if(MSVC)
    message(STATUS "Configured with ${FIND_PACKAGES_FOUND}")
  else()
    message(STATUS "Configured with ${CMAKE_BUILD_TYPE}${FIND_PACKAGES_FOUND}")
  endif()
endif()
