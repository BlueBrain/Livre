# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})

find_package(Qt4 4.6 COMPONENTS QtCore QtGui)
if(Qt4_FOUND)
  set(Qt4_name Qt4)
endif()
if(QT4_FOUND)
  set(Qt4_name QT4)
endif()
if(Qt4_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_QT4)
  link_directories(${${Qt4_name}_LIBRARY_DIRS})
  include_directories(${${Qt4_name}_INCLUDE_DIRS})
endif()

find_package(Boost 1.41.0 REQUIRED date_time)
if(Boost_FOUND)
  set(Boost_name Boost)
endif()
if(BOOST_FOUND)
  set(Boost_name BOOST)
endif()
if(Boost_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_BOOST)
  link_directories(${${Boost_name}_LIBRARY_DIRS})
  include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIRS})
endif()

find_package(Collage 0.7.0 REQUIRED)
if(Collage_FOUND)
  set(Collage_name Collage)
endif()
if(COLLAGE_FOUND)
  set(Collage_name COLLAGE)
endif()
if(Collage_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_COLLAGE)
  link_directories(${${Collage_name}_LIBRARY_DIRS})
  include_directories(${${Collage_name}_INCLUDE_DIRS})
endif()

find_package(Equalizer 1.5.0 REQUIRED)
if(Equalizer_FOUND)
  set(Equalizer_name Equalizer)
endif()
if(EQUALIZER_FOUND)
  set(Equalizer_name EQUALIZER)
endif()
if(Equalizer_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_EQUALIZER)
  link_directories(${${Equalizer_name}_LIBRARY_DIRS})
  include_directories(${${Equalizer_name}_INCLUDE_DIRS})
endif()

find_package(Lunchbox 1.7.1 REQUIRED)
if(Lunchbox_FOUND)
  set(Lunchbox_name Lunchbox)
endif()
if(LUNCHBOX_FOUND)
  set(Lunchbox_name LUNCHBOX)
endif()
if(Lunchbox_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_LUNCHBOX)
  link_directories(${${Lunchbox_name}_LIBRARY_DIRS})
  include_directories(${${Lunchbox_name}_INCLUDE_DIRS})
endif()

find_package(PNG  REQUIRED)
if(PNG_FOUND)
  set(PNG_name PNG)
endif()
if(PNG_FOUND)
  set(PNG_name PNG)
endif()
if(PNG_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_PNG)
  link_directories(${${PNG_name}_LIBRARY_DIRS})
  include_directories(${${PNG_name}_INCLUDE_DIRS})
endif()

find_package(Threads  REQUIRED)
if(Threads_FOUND)
  set(Threads_name Threads)
endif()
if(THREADS_FOUND)
  set(Threads_name THREADS)
endif()
if(Threads_name)
  list(APPEND FIND_PACKAGES_DEFINES LIVRE_USE_THREADS)
  link_directories(${${Threads_name}_LIBRARY_DIRS})
  include_directories(${${Threads_name}_INCLUDE_DIRS})
endif()


set(LIVRE_DEPENDS Qt4;Boost;Collage;Equalizer;Lunchbox;PNG;Threads)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  set(PROJECT_INCLUDE_NAME ${CMAKE_PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by Buildyard, do not edit.\n\n"
  "#ifndef ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF})
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF}\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
update_file(${DEFINES_FILE_IN} ${DEFINES_FILE})
